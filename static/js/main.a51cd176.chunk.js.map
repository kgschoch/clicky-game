{"version":3,"sources":["components/Navbar.js","components/Jumbotron.js","components/Picture.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","headline","topscore","score","Jumbotron","Picture","src","link","onClick","clicker","id","App","state","playerArray","Players","playersGuessed","topScore","shuffle","j","x","i","length","Math","floor","random","clicky","_this","indexOf","setState","prevState","Object","toConsumableArray","concat","_this2","this","src_components_Navbar","src_components_Jumbotron","map","player","src_components_Picture","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4rCAaeA,eAVA,SAACC,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,WACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAY,oBAAhB,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAY,oBAAoBJ,EAAMK,UAC1CJ,EAAAC,EAAAC,cAAA,MAAIC,UAAY,oBAAhB,cAA+CJ,EAAMM,SAArD,aAAyEN,EAAMO,UCMtEC,SAXG,SAACR,GACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,eACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,uFCIWK,SATC,SAACT,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aACjBM,IAAMV,EAAMW,KACZC,QAAU,kBAAMZ,EAAMa,QAAQb,EAAMc,SCwEzBC,6MAtEbC,MAAQ,CACNC,YAAaC,EACbC,eAAgB,GAChBZ,MAAO,EACPa,SAAU,EACVf,SAAU,6BAGZgB,QAAU,SAAAnB,GACR,IAAIoB,EAAGC,EAAGC,EACV,IAAKA,EAAItB,EAAEuB,OAAS,EAAGD,EAAI,EAAGA,IAC1BF,EAAII,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCD,EAAIrB,EAAEsB,GACNtB,EAAEsB,GAAKtB,EAAEoB,GACTpB,EAAEoB,GAAKC,EAEX,OAAOrB,KAET2B,OAAS,SAACf,IACuC,IAA3CgB,EAAKd,MAAMG,eAAeY,QAAQjB,GACpCgB,EAAKE,SAAU,SAAAC,GAAS,MAAK,CAC3B1B,MAAO0B,EAAU1B,MAAQ,EACzBY,eAAee,OAAAC,EAAA,EAAAD,CAAKD,EAAUd,gBAAhBiB,OAAA,CAAgCtB,IAC9CG,YAAaa,EAAKT,QAAQY,EAAUhB,aACpCZ,SAAU,4BAIZyB,EAAKE,SAAU,CACbzB,MAAO,EACPY,eAAgB,GAChBd,SAAU,6BAGVyB,EAAKd,MAAMT,OAASuB,EAAKd,MAAMI,UACjCU,EAAKE,SAAU,SAAAC,GAAS,MAAK,CAC3Bb,SAAWa,EAAU1B,kFAQlB,IAAA8B,EAAAC,KACP,OACErC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACoC,EAAD,CACEjC,SAAYgC,KAAKtB,MAAMI,SACvBb,MAAS+B,KAAKtB,MAAMT,MACpBF,SAAYiC,KAAKtB,MAAMX,WAEzBJ,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,gBACdkC,KAAKtB,MAAMC,YAAYwB,IACtB,SAAAC,GAAM,OACJzC,EAAAC,EAAAC,cAACwC,EAAD,CACA9B,QAAWwB,EAAKR,OAChBf,GAAM4B,EAAO5B,GACbH,KAAQ+B,EAAOhC,iBA7DTkC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a51cd176.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Navbar.css\";\n\nconst Navbar = (props) => {\n  return (\n    <div className = \"row nav\">\n      <h3 className = \"col-sm-4 navText\">Clicky Game</h3>\n      <h3 className = \"col-sm-4 navText\">{props.headline}</h3>\n      <h3 className = \"col-sm-4 navText\">Top Score: {props.topscore} | Score: {props.score}</h3>\n    </div>\n  )\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./Jumbotron.css\";\n\nconst Jumbotron = (props) => {\n  return(\n    <div className=\"jumbotron jumbotron-fluid\">\n  <div className=\"container\">\n    <h1 className=\"display-4\">Clicky Game</h1>\n    <p className=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n  </div>\n</div>\n  )\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./Picture.css\";\n\nconst Picture = (props) => {\n  return (\n    <img className = \"pictureImg\" \n    src= {props.link} \n    onClick= {() => props.clicker(props.id)}\n    />\n  )\n}\n\nexport default Picture;","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\"\nimport Players from \"./players.json\"\nimport Picture from './components/Picture';\n\nclass App extends Component {\n\n  state = {\n    playerArray: Players,\n    playersGuessed: [],\n    score: 0,\n    topScore: 0,\n    headline: \"Click an Image to Begin\"\n  }\n\n  shuffle = a => {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n    }\n    return a;\n}\n  clicky = (id) => {\n    if (this.state.playersGuessed.indexOf(id) === -1) {\n      this.setState (prevState => ({\n        score: prevState.score + 1,\n        playersGuessed: [...prevState.playersGuessed, id],\n        playerArray: this.shuffle(prevState.playerArray),\n        headline: \"You Guessed Correctly!\"\n      }))\n    }\n    else {\n      this.setState ({\n        score: 0,\n        playersGuessed: [],\n        headline: \"You Guessed Incorrectly!\"\n      })\n    }\n    if (this.state.score >= this.state.topScore) {\n      this.setState (prevState => ({\n        topScore: (prevState.score)\n      }))\n    }\n  }\n  \n\n  \n\n  render() {\n    return (\n      <div>\n      <Navbar       \n        topscore = {this.state.topScore}\n        score = {this.state.score}\n        headline = {this.state.headline}\n      />\n      <Jumbotron/>\n      <div className = \"imgContainer\">\n        {this.state.playerArray.map(\n          player => (\n            <Picture \n            clicker = {this.clicky} \n            id = {player.id} \n            link = {player.src}\n            />\n          )\n        )}\n      </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}